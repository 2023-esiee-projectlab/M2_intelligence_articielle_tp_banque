2022-12-06 00:56:21,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-06 00:56:21,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-06 00:56:21,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-06 00:56:21,136:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2022-12-06 00:56:23,288:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2022-12-06 00:56:24,394:INFO:PyCaret RegressionExperiment
2022-12-06 00:56:24,394:INFO:Logging name: reg-default-name
2022-12-06 00:56:24,394:INFO:ML Usecase: MLUsecase.REGRESSION
2022-12-06 00:56:24,394:INFO:version 3.0.0.rc4
2022-12-06 00:56:24,395:INFO:Initializing setup()
2022-12-06 00:56:24,395:INFO:self.USI: faf5
2022-12-06 00:56:24,395:INFO:self.variable_keys: {'seed', '_gpu_n_jobs_param', 'pipeline', 'fold_groups_param', 'data', '_all_metrics', 'logging_param', 'exp_name_log', 'idx', 'master_model_container', 'fold_shuffle_param', 'transform_target_param', '_all_models_internal', 'variable_keys', 'html_param', 'transform_target_method_param', 'memory', 'X_train', '_ml_usecase', 'target_param', '_available_plots', 'display_container', 'exp_id', '_all_models', 'y_test', 'X_test', 'y', 'X', 'USI', 'gpu_param', 'fold_generator', 'n_jobs_param', 'log_plots_param', 'y_train'}
2022-12-06 00:56:24,395:INFO:Checking environment
2022-12-06 00:56:24,395:INFO:python_version: 3.10.6
2022-12-06 00:56:24,395:INFO:python_build: ('tags/v3.10.6:9c7b4bd', 'Aug  1 2022 21:53:49')
2022-12-06 00:56:24,395:INFO:machine: AMD64
2022-12-06 00:56:24,395:INFO:platform: Windows-10-10.0.19044-SP0
2022-12-06 00:56:24,402:INFO:Memory: svmem(total=34187988992, available=16573124608, percent=51.5, used=17614864384, free=16573124608)
2022-12-06 00:56:24,402:INFO:Physical Core: 6
2022-12-06 00:56:24,402:INFO:Logical Core: 12
2022-12-06 00:56:24,403:INFO:Checking libraries
2022-12-06 00:56:24,403:INFO:System:
2022-12-06 00:56:24,403:INFO:    python: 3.10.6 (tags/v3.10.6:9c7b4bd, Aug  1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)]
2022-12-06 00:56:24,403:INFO:executable: C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\Scripts\python.exe
2022-12-06 00:56:24,403:INFO:   machine: Windows-10-10.0.19044-SP0
2022-12-06 00:56:24,403:INFO:PyCaret required dependencies:
2022-12-06 00:56:24,403:INFO:                 pip: 22.3.1
2022-12-06 00:56:24,403:INFO:          setuptools: 63.2.0
2022-12-06 00:56:24,403:INFO:             pycaret: 3.0.0rc4
2022-12-06 00:56:24,404:INFO:             IPython: 8.7.0
2022-12-06 00:56:24,404:INFO:          ipywidgets: 8.0.2
2022-12-06 00:56:24,404:INFO:                tqdm: 4.64.1
2022-12-06 00:56:24,404:INFO:               numpy: 1.22.4
2022-12-06 00:56:24,404:INFO:              pandas: 1.4.4
2022-12-06 00:56:24,404:INFO:              jinja2: 3.1.2
2022-12-06 00:56:24,404:INFO:               scipy: 1.8.1
2022-12-06 00:56:24,404:INFO:              joblib: 1.2.0
2022-12-06 00:56:24,404:INFO:             sklearn: 1.1.3
2022-12-06 00:56:24,404:INFO:                pyod: 1.0.6
2022-12-06 00:56:24,404:INFO:            imblearn: 0.9.1
2022-12-06 00:56:24,404:INFO:   category_encoders: 2.5.1.post0
2022-12-06 00:56:24,405:INFO:            lightgbm: 3.3.3
2022-12-06 00:56:24,405:INFO:               numba: 0.55.2
2022-12-06 00:56:24,405:INFO:            requests: 2.28.1
2022-12-06 00:56:24,405:INFO:          matplotlib: 3.6.2
2022-12-06 00:56:24,405:INFO:          scikitplot: 0.3.7
2022-12-06 00:56:24,405:INFO:         yellowbrick: 1.5
2022-12-06 00:56:24,405:INFO:              plotly: 5.11.0
2022-12-06 00:56:24,405:INFO:             kaleido: 0.2.1
2022-12-06 00:56:24,405:INFO:         statsmodels: 0.13.5
2022-12-06 00:56:24,405:INFO:              sktime: 0.13.4
2022-12-06 00:56:24,406:INFO:               tbats: 1.1.1
2022-12-06 00:56:24,406:INFO:            pmdarima: 1.8.5
2022-12-06 00:56:24,406:INFO:              psutil: 5.9.4
2022-12-06 00:56:24,406:INFO:PyCaret optional dependencies:
2022-12-06 00:56:25,180:INFO:                shap: Not installed
2022-12-06 00:56:25,180:INFO:           interpret: Not installed
2022-12-06 00:56:25,180:INFO:                umap: Not installed
2022-12-06 00:56:25,180:INFO:    pandas_profiling: Not installed
2022-12-06 00:56:25,180:INFO:  explainerdashboard: Not installed
2022-12-06 00:56:25,180:INFO:             autoviz: Not installed
2022-12-06 00:56:25,180:INFO:           fairlearn: Not installed
2022-12-06 00:56:25,180:INFO:             xgboost: Not installed
2022-12-06 00:56:25,180:INFO:            catboost: Not installed
2022-12-06 00:56:25,180:INFO:              kmodes: Not installed
2022-12-06 00:56:25,180:INFO:             mlxtend: Not installed
2022-12-06 00:56:25,181:INFO:       statsforecast: Not installed
2022-12-06 00:56:25,181:INFO:        tune_sklearn: Not installed
2022-12-06 00:56:25,181:INFO:                 ray: Not installed
2022-12-06 00:56:25,181:INFO:            hyperopt: Not installed
2022-12-06 00:56:25,181:INFO:              optuna: Not installed
2022-12-06 00:56:25,181:INFO:               skopt: Not installed
2022-12-06 00:56:25,181:INFO:              mlflow: Not installed
2022-12-06 00:56:25,181:INFO:              gradio: Not installed
2022-12-06 00:56:25,181:INFO:             fastapi: 0.88.0
2022-12-06 00:56:25,181:INFO:             uvicorn: 0.20.0
2022-12-06 00:56:25,181:INFO:              m2cgen: Not installed
2022-12-06 00:56:25,181:INFO:           evidently: Not installed
2022-12-06 00:56:25,181:INFO:                nltk: Not installed
2022-12-06 00:56:25,181:INFO:            pyLDAvis: Not installed
2022-12-06 00:56:25,181:INFO:              gensim: Not installed
2022-12-06 00:56:25,181:INFO:               spacy: Not installed
2022-12-06 00:56:25,181:INFO:           wordcloud: Not installed
2022-12-06 00:56:25,181:INFO:            textblob: Not installed
2022-12-06 00:56:25,182:INFO:               fugue: Not installed
2022-12-06 00:56:25,182:INFO:           streamlit: Not installed
2022-12-06 00:56:25,182:INFO:             prophet: Not installed
2022-12-06 00:56:25,182:INFO:None
2022-12-06 00:56:25,182:INFO:Set up data.
2022-12-06 00:56:25,188:INFO:Set up train/test split.
2022-12-06 00:56:25,193:INFO:Set up index.
2022-12-06 00:56:25,193:INFO:Set up folding strategy.
2022-12-06 00:56:25,193:INFO:Assigning column types.
2022-12-06 00:56:25,197:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2022-12-06 00:56:25,197:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,202:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,208:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,289:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,339:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,340:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,412:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,417:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,422:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,512:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,567:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,568:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,568:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,569:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2022-12-06 00:56:25,574:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,579:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,645:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,697:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,697:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,697:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,703:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,708:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,775:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,827:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,827:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,828:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,828:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2022-12-06 00:56:25,838:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,906:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,980:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:25,980:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,980:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:25,991:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,056:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,106:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,107:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,107:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,108:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2022-12-06 00:56:26,183:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,235:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,236:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,236:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,313:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,363:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,364:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,365:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2022-12-06 00:56:26,437:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,487:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,585:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:26,637:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,637:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,638:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2022-12-06 00:56:26,765:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,893:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,893:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:26,896:INFO:Preparing preprocessing pipeline...
2022-12-06 00:56:26,897:INFO:Set up simple imputation.
2022-12-06 00:56:26,900:INFO:Set up encoding of ordinal features.
2022-12-06 00:56:26,903:INFO:Set up encoding of categorical features.
2022-12-06 00:56:26,903:INFO:Set up variance threshold.
2022-12-06 00:56:27,090:INFO:Finished creating preprocessing pipeline.
2022-12-06 00:56:27,105:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\dumay\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(fill_value='constant',
                                                              strategy='constant'))),
                ('ordinal_encoding'...
                                                               mapping=[{'col': 'sex',
                                                                         'mapping': {nan: -1,
                                                                                     'female': 0,
                                                                                     'male': 1}},
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('low_variance',
                 TransformerWrapper(exclude=[],
                                    transformer=VarianceThreshold(threshold=0)))])
2022-12-06 00:56:27,105:INFO:Creating final display dataframe.
2022-12-06 00:56:27,846:INFO:Setup display_container:                  Description             Value
0                 Session id              7719
1                     Target           charges
2                Target type        Regression
3                 Data shape        (1338, 10)
4           Train data shape         (936, 10)
5            Test data shape         (402, 10)
6           Ordinal features                 2
7           Numeric features                 3
8       Categorical features                 3
9                 Preprocess              True
10           Imputation type            simple
11        Numeric imputation              mean
12    Categorical imputation          constant
13  Maximum one-hot encoding                 5
14           Encoding method              None
15    Low variance threshold                 0
16            Fold Generator             KFold
17               Fold Number                10
18                  CPU Jobs                -1
19                   Use GPU             False
20            Log Experiment             False
21           Experiment Name  reg-default-name
22                       USI              faf5
2022-12-06 00:56:28,002:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:28,003:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:28,152:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:28,152:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:28,159:INFO:setup() successfully completed in 3.77s...............
2022-12-06 00:56:28,172:INFO:Initializing compare_models()
2022-12-06 00:56:28,172:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CDECF5720>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000022CDECF5720>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2022-12-06 00:56:28,172:INFO:Checking exceptions
2022-12-06 00:56:28,175:INFO:Preparing display monitor
2022-12-06 00:56:28,234:INFO:Initializing Linear Regression
2022-12-06 00:56:28,234:INFO:Total runtime is 0.0 minutes
2022-12-06 00:56:28,239:INFO:SubProcess create_model() called ==================================
2022-12-06 00:56:28,239:INFO:Initializing create_model()
2022-12-06 00:56:28,239:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CDECF5720>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE0A4DAB0>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:56:28,239:INFO:Checking exceptions
2022-12-06 00:56:28,241:INFO:Importing libraries
2022-12-06 00:56:28,241:INFO:Copying training dataset
2022-12-06 00:56:28,245:INFO:Defining folds
2022-12-06 00:56:28,245:INFO:Declaring metric variables
2022-12-06 00:56:28,248:INFO:Importing untrained model
2022-12-06 00:56:28,252:INFO:Linear Regression Imported successfully
2022-12-06 00:56:28,259:INFO:Starting cross validation
2022-12-06 00:56:28,265:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:56:54,098:INFO:PyCaret RegressionExperiment
2022-12-06 00:56:54,098:INFO:Logging name: reg-default-name
2022-12-06 00:56:54,098:INFO:ML Usecase: MLUsecase.REGRESSION
2022-12-06 00:56:54,099:INFO:version 3.0.0.rc4
2022-12-06 00:56:54,099:INFO:Initializing setup()
2022-12-06 00:56:54,099:INFO:self.USI: 26a8
2022-12-06 00:56:54,099:INFO:self.variable_keys: {'seed', '_gpu_n_jobs_param', 'pipeline', 'fold_groups_param', 'data', '_all_metrics', 'logging_param', 'exp_name_log', 'idx', 'master_model_container', 'fold_shuffle_param', 'transform_target_param', '_all_models_internal', 'variable_keys', 'html_param', 'transform_target_method_param', 'memory', 'X_train', '_ml_usecase', 'target_param', '_available_plots', 'display_container', 'exp_id', '_all_models', 'y_test', 'X_test', 'y', 'X', 'USI', 'gpu_param', 'fold_generator', 'n_jobs_param', 'log_plots_param', 'y_train'}
2022-12-06 00:56:54,099:INFO:Checking environment
2022-12-06 00:56:54,099:INFO:python_version: 3.10.6
2022-12-06 00:56:54,100:INFO:python_build: ('tags/v3.10.6:9c7b4bd', 'Aug  1 2022 21:53:49')
2022-12-06 00:56:54,100:INFO:machine: AMD64
2022-12-06 00:56:54,100:INFO:platform: Windows-10-10.0.19044-SP0
2022-12-06 00:56:54,111:INFO:Memory: svmem(total=34187988992, available=16535388160, percent=51.6, used=17652600832, free=16535388160)
2022-12-06 00:56:54,112:INFO:Physical Core: 6
2022-12-06 00:56:54,112:INFO:Logical Core: 12
2022-12-06 00:56:54,112:INFO:Checking libraries
2022-12-06 00:56:54,112:INFO:System:
2022-12-06 00:56:54,112:INFO:    python: 3.10.6 (tags/v3.10.6:9c7b4bd, Aug  1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)]
2022-12-06 00:56:54,113:INFO:executable: C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\Scripts\python.exe
2022-12-06 00:56:54,113:INFO:   machine: Windows-10-10.0.19044-SP0
2022-12-06 00:56:54,113:INFO:PyCaret required dependencies:
2022-12-06 00:56:54,113:INFO:                 pip: 22.3.1
2022-12-06 00:56:54,113:INFO:          setuptools: 63.2.0
2022-12-06 00:56:54,114:INFO:             pycaret: 3.0.0rc4
2022-12-06 00:56:54,114:INFO:             IPython: 8.7.0
2022-12-06 00:56:54,114:INFO:          ipywidgets: 8.0.2
2022-12-06 00:56:54,114:INFO:                tqdm: 4.64.1
2022-12-06 00:56:54,114:INFO:               numpy: 1.22.4
2022-12-06 00:56:54,114:INFO:              pandas: 1.4.4
2022-12-06 00:56:54,114:INFO:              jinja2: 3.1.2
2022-12-06 00:56:54,115:INFO:               scipy: 1.8.1
2022-12-06 00:56:54,115:INFO:              joblib: 1.2.0
2022-12-06 00:56:54,115:INFO:             sklearn: 1.1.3
2022-12-06 00:56:54,115:INFO:                pyod: 1.0.6
2022-12-06 00:56:54,115:INFO:            imblearn: 0.9.1
2022-12-06 00:56:54,115:INFO:   category_encoders: 2.5.1.post0
2022-12-06 00:56:54,115:INFO:            lightgbm: 3.3.3
2022-12-06 00:56:54,115:INFO:               numba: 0.55.2
2022-12-06 00:56:54,115:INFO:            requests: 2.28.1
2022-12-06 00:56:54,115:INFO:          matplotlib: 3.6.2
2022-12-06 00:56:54,115:INFO:          scikitplot: 0.3.7
2022-12-06 00:56:54,116:INFO:         yellowbrick: 1.5
2022-12-06 00:56:54,116:INFO:              plotly: 5.11.0
2022-12-06 00:56:54,116:INFO:             kaleido: 0.2.1
2022-12-06 00:56:54,116:INFO:         statsmodels: 0.13.5
2022-12-06 00:56:54,116:INFO:              sktime: 0.13.4
2022-12-06 00:56:54,116:INFO:               tbats: 1.1.1
2022-12-06 00:56:54,116:INFO:            pmdarima: 1.8.5
2022-12-06 00:56:54,117:INFO:              psutil: 5.9.4
2022-12-06 00:56:54,117:INFO:PyCaret optional dependencies:
2022-12-06 00:56:54,117:INFO:                shap: Not installed
2022-12-06 00:56:54,117:INFO:           interpret: Not installed
2022-12-06 00:56:54,117:INFO:                umap: Not installed
2022-12-06 00:56:54,117:INFO:    pandas_profiling: Not installed
2022-12-06 00:56:54,117:INFO:  explainerdashboard: Not installed
2022-12-06 00:56:54,117:INFO:             autoviz: Not installed
2022-12-06 00:56:54,118:INFO:           fairlearn: Not installed
2022-12-06 00:56:54,118:INFO:             xgboost: Not installed
2022-12-06 00:56:54,118:INFO:            catboost: Not installed
2022-12-06 00:56:54,118:INFO:              kmodes: Not installed
2022-12-06 00:56:54,118:INFO:             mlxtend: Not installed
2022-12-06 00:56:54,118:INFO:       statsforecast: Not installed
2022-12-06 00:56:54,118:INFO:        tune_sklearn: Not installed
2022-12-06 00:56:54,118:INFO:                 ray: Not installed
2022-12-06 00:56:54,118:INFO:            hyperopt: Not installed
2022-12-06 00:56:54,118:INFO:              optuna: Not installed
2022-12-06 00:56:54,118:INFO:               skopt: Not installed
2022-12-06 00:56:54,118:INFO:              mlflow: Not installed
2022-12-06 00:56:54,118:INFO:              gradio: Not installed
2022-12-06 00:56:54,119:INFO:             fastapi: 0.88.0
2022-12-06 00:56:54,119:INFO:             uvicorn: 0.20.0
2022-12-06 00:56:54,119:INFO:              m2cgen: Not installed
2022-12-06 00:56:54,119:INFO:           evidently: Not installed
2022-12-06 00:56:54,119:INFO:                nltk: Not installed
2022-12-06 00:56:54,119:INFO:            pyLDAvis: Not installed
2022-12-06 00:56:54,119:INFO:              gensim: Not installed
2022-12-06 00:56:54,119:INFO:               spacy: Not installed
2022-12-06 00:56:54,119:INFO:           wordcloud: Not installed
2022-12-06 00:56:54,119:INFO:            textblob: Not installed
2022-12-06 00:56:54,119:INFO:               fugue: Not installed
2022-12-06 00:56:54,119:INFO:           streamlit: Not installed
2022-12-06 00:56:54,119:INFO:             prophet: Not installed
2022-12-06 00:56:54,119:INFO:None
2022-12-06 00:56:54,119:INFO:Set up data.
2022-12-06 00:56:54,125:INFO:Set up train/test split.
2022-12-06 00:56:54,130:INFO:Set up index.
2022-12-06 00:56:54,131:INFO:Set up folding strategy.
2022-12-06 00:56:54,131:INFO:Assigning column types.
2022-12-06 00:56:54,136:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2022-12-06 00:56:54,136:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,145:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,151:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,228:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,303:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,305:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,310:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,316:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,382:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,458:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,459:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,459:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,459:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2022-12-06 00:56:54,465:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,470:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,535:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,586:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,587:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,593:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,598:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,680:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,731:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,732:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,732:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,732:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2022-12-06 00:56:54,743:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,830:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,882:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,882:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,883:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:54,893:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2022-12-06 00:56:54,959:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,035:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,035:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,036:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,036:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2022-12-06 00:56:55,113:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,164:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,165:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,165:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,241:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,294:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,295:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,295:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2022-12-06 00:56:55,398:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,452:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,452:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,529:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2022-12-06 00:56:55,585:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,585:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,585:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2022-12-06 00:56:55,927:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:55,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:56,088:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:56,088:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:56,089:INFO:Preparing preprocessing pipeline...
2022-12-06 00:56:56,090:INFO:Set up simple imputation.
2022-12-06 00:56:56,094:INFO:Set up encoding of ordinal features.
2022-12-06 00:56:56,096:INFO:Set up encoding of categorical features.
2022-12-06 00:56:56,096:INFO:Set up variance threshold.
2022-12-06 00:56:56,270:INFO:Finished creating preprocessing pipeline.
2022-12-06 00:56:56,283:INFO:Pipeline: Pipeline(memory=Memory(location=C:\Users\dumay\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(fill_value='constant',
                                                              strategy='constant'))),
                ('ordinal_encoding'...
                                                               mapping=[{'col': 'sex',
                                                                         'mapping': {nan: -1,
                                                                                     'female': 0,
                                                                                     'male': 1}},
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('low_variance',
                 TransformerWrapper(exclude=[],
                                    transformer=VarianceThreshold(threshold=0)))])
2022-12-06 00:56:56,284:INFO:Creating final display dataframe.
2022-12-06 00:56:56,985:INFO:Setup display_container:                  Description             Value
0                 Session id              6923
1                     Target           charges
2                Target type        Regression
3                 Data shape        (1338, 10)
4           Train data shape         (936, 10)
5            Test data shape         (402, 10)
6           Ordinal features                 2
7           Numeric features                 3
8       Categorical features                 3
9                 Preprocess              True
10           Imputation type            simple
11        Numeric imputation              mean
12    Categorical imputation          constant
13  Maximum one-hot encoding                 5
14           Encoding method              None
15    Low variance threshold                 0
16            Fold Generator             KFold
17               Fold Number                10
18                  CPU Jobs                -1
19                   Use GPU             False
20            Log Experiment             False
21           Experiment Name  reg-default-name
22                       USI              26a8
2022-12-06 00:56:57,156:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:57,156:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:57,310:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:57,310:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2022-12-06 00:56:57,319:INFO:setup() successfully completed in 3.22s...............
2022-12-06 00:57:03,438:INFO:Initializing compare_models()
2022-12-06 00:57:03,438:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2022-12-06 00:57:03,438:INFO:Checking exceptions
2022-12-06 00:57:03,442:INFO:Preparing display monitor
2022-12-06 00:57:03,491:INFO:Initializing Linear Regression
2022-12-06 00:57:03,491:INFO:Total runtime is 0.0 minutes
2022-12-06 00:57:03,495:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:03,495:INFO:Initializing create_model()
2022-12-06 00:57:03,496:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:03,496:INFO:Checking exceptions
2022-12-06 00:57:03,497:INFO:Importing libraries
2022-12-06 00:57:03,498:INFO:Copying training dataset
2022-12-06 00:57:03,500:INFO:Defining folds
2022-12-06 00:57:03,500:INFO:Declaring metric variables
2022-12-06 00:57:03,506:INFO:Importing untrained model
2022-12-06 00:57:03,510:INFO:Linear Regression Imported successfully
2022-12-06 00:57:03,517:INFO:Starting cross validation
2022-12-06 00:57:03,522:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:09,456:INFO:Calculating mean and std
2022-12-06 00:57:09,459:INFO:Creating metrics dataframe
2022-12-06 00:57:09,465:INFO:Uploading results into container
2022-12-06 00:57:09,466:INFO:Uploading model into container now
2022-12-06 00:57:09,466:INFO:master_model_container: 1
2022-12-06 00:57:09,466:INFO:display_container: 2
2022-12-06 00:57:09,467:INFO:LinearRegression(n_jobs=-1)
2022-12-06 00:57:09,467:INFO:create_model() successfully completed......................................
2022-12-06 00:57:09,607:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:09,607:INFO:Creating metrics dataframe
2022-12-06 00:57:09,634:INFO:Initializing Lasso Regression
2022-12-06 00:57:09,635:INFO:Total runtime is 0.10240275462468465 minutes
2022-12-06 00:57:09,644:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:09,645:INFO:Initializing create_model()
2022-12-06 00:57:09,645:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:09,646:INFO:Checking exceptions
2022-12-06 00:57:09,650:INFO:Importing libraries
2022-12-06 00:57:09,650:INFO:Copying training dataset
2022-12-06 00:57:09,659:INFO:Defining folds
2022-12-06 00:57:09,660:INFO:Declaring metric variables
2022-12-06 00:57:09,667:INFO:Importing untrained model
2022-12-06 00:57:09,677:INFO:Lasso Regression Imported successfully
2022-12-06 00:57:09,686:INFO:Starting cross validation
2022-12-06 00:57:09,688:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:12,005:INFO:Calculating mean and std
2022-12-06 00:57:12,008:INFO:Creating metrics dataframe
2022-12-06 00:57:12,013:INFO:Uploading results into container
2022-12-06 00:57:12,014:INFO:Uploading model into container now
2022-12-06 00:57:12,014:INFO:master_model_container: 2
2022-12-06 00:57:12,014:INFO:display_container: 2
2022-12-06 00:57:12,015:INFO:Lasso(random_state=6923)
2022-12-06 00:57:12,015:INFO:create_model() successfully completed......................................
2022-12-06 00:57:12,153:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:12,153:INFO:Creating metrics dataframe
2022-12-06 00:57:12,164:INFO:Initializing Ridge Regression
2022-12-06 00:57:12,164:INFO:Total runtime is 0.1445503314336141 minutes
2022-12-06 00:57:12,168:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:12,168:INFO:Initializing create_model()
2022-12-06 00:57:12,168:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:12,168:INFO:Checking exceptions
2022-12-06 00:57:12,171:INFO:Importing libraries
2022-12-06 00:57:12,171:INFO:Copying training dataset
2022-12-06 00:57:12,176:INFO:Defining folds
2022-12-06 00:57:12,176:INFO:Declaring metric variables
2022-12-06 00:57:12,180:INFO:Importing untrained model
2022-12-06 00:57:12,184:INFO:Ridge Regression Imported successfully
2022-12-06 00:57:12,192:INFO:Starting cross validation
2022-12-06 00:57:12,194:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:12,360:INFO:Calculating mean and std
2022-12-06 00:57:12,361:INFO:Creating metrics dataframe
2022-12-06 00:57:12,365:INFO:Uploading results into container
2022-12-06 00:57:12,365:INFO:Uploading model into container now
2022-12-06 00:57:12,366:INFO:master_model_container: 3
2022-12-06 00:57:12,366:INFO:display_container: 2
2022-12-06 00:57:12,367:INFO:Ridge(random_state=6923)
2022-12-06 00:57:12,367:INFO:create_model() successfully completed......................................
2022-12-06 00:57:12,521:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:12,522:INFO:Creating metrics dataframe
2022-12-06 00:57:12,532:INFO:Initializing Elastic Net
2022-12-06 00:57:12,532:INFO:Total runtime is 0.1506836771965027 minutes
2022-12-06 00:57:12,536:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:12,536:INFO:Initializing create_model()
2022-12-06 00:57:12,537:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:12,537:INFO:Checking exceptions
2022-12-06 00:57:12,539:INFO:Importing libraries
2022-12-06 00:57:12,539:INFO:Copying training dataset
2022-12-06 00:57:12,543:INFO:Defining folds
2022-12-06 00:57:12,543:INFO:Declaring metric variables
2022-12-06 00:57:12,547:INFO:Importing untrained model
2022-12-06 00:57:12,552:INFO:Elastic Net Imported successfully
2022-12-06 00:57:12,560:INFO:Starting cross validation
2022-12-06 00:57:12,561:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:12,716:INFO:Calculating mean and std
2022-12-06 00:57:12,718:INFO:Creating metrics dataframe
2022-12-06 00:57:12,721:INFO:Uploading results into container
2022-12-06 00:57:12,721:INFO:Uploading model into container now
2022-12-06 00:57:12,722:INFO:master_model_container: 4
2022-12-06 00:57:12,722:INFO:display_container: 2
2022-12-06 00:57:12,722:INFO:ElasticNet(random_state=6923)
2022-12-06 00:57:12,723:INFO:create_model() successfully completed......................................
2022-12-06 00:57:12,861:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:12,861:INFO:Creating metrics dataframe
2022-12-06 00:57:12,872:INFO:Initializing Least Angle Regression
2022-12-06 00:57:12,872:INFO:Total runtime is 0.1563506325085958 minutes
2022-12-06 00:57:12,878:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:12,878:INFO:Initializing create_model()
2022-12-06 00:57:12,879:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:12,879:INFO:Checking exceptions
2022-12-06 00:57:12,883:INFO:Importing libraries
2022-12-06 00:57:12,883:INFO:Copying training dataset
2022-12-06 00:57:12,893:INFO:Defining folds
2022-12-06 00:57:12,893:INFO:Declaring metric variables
2022-12-06 00:57:12,903:INFO:Importing untrained model
2022-12-06 00:57:12,909:INFO:Least Angle Regression Imported successfully
2022-12-06 00:57:12,921:INFO:Starting cross validation
2022-12-06 00:57:12,923:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:13,006:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,009:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,025:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,028:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,033:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,039:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,048:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,067:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,070:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,075:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,106:INFO:Calculating mean and std
2022-12-06 00:57:13,108:INFO:Creating metrics dataframe
2022-12-06 00:57:13,111:INFO:Uploading results into container
2022-12-06 00:57:13,112:INFO:Uploading model into container now
2022-12-06 00:57:13,112:INFO:master_model_container: 5
2022-12-06 00:57:13,112:INFO:display_container: 2
2022-12-06 00:57:13,113:INFO:Lars(random_state=6923)
2022-12-06 00:57:13,113:INFO:create_model() successfully completed......................................
2022-12-06 00:57:13,248:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:13,248:INFO:Creating metrics dataframe
2022-12-06 00:57:13,259:INFO:Initializing Lasso Least Angle Regression
2022-12-06 00:57:13,260:INFO:Total runtime is 0.16281836032867433 minutes
2022-12-06 00:57:13,265:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:13,265:INFO:Initializing create_model()
2022-12-06 00:57:13,266:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:13,266:INFO:Checking exceptions
2022-12-06 00:57:13,271:INFO:Importing libraries
2022-12-06 00:57:13,271:INFO:Copying training dataset
2022-12-06 00:57:13,280:INFO:Defining folds
2022-12-06 00:57:13,281:INFO:Declaring metric variables
2022-12-06 00:57:13,291:INFO:Importing untrained model
2022-12-06 00:57:13,301:INFO:Lasso Least Angle Regression Imported successfully
2022-12-06 00:57:13,319:INFO:Starting cross validation
2022-12-06 00:57:13,321:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:13,398:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,410:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,423:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,430:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,447:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,462:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,472:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,473:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,483:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,492:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2022-12-06 00:57:13,525:INFO:Calculating mean and std
2022-12-06 00:57:13,527:INFO:Creating metrics dataframe
2022-12-06 00:57:13,531:INFO:Uploading results into container
2022-12-06 00:57:13,532:INFO:Uploading model into container now
2022-12-06 00:57:13,532:INFO:master_model_container: 6
2022-12-06 00:57:13,532:INFO:display_container: 2
2022-12-06 00:57:13,533:INFO:LassoLars(random_state=6923)
2022-12-06 00:57:13,533:INFO:create_model() successfully completed......................................
2022-12-06 00:57:13,665:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:13,665:INFO:Creating metrics dataframe
2022-12-06 00:57:13,678:INFO:Initializing Orthogonal Matching Pursuit
2022-12-06 00:57:13,678:INFO:Total runtime is 0.1697925925254822 minutes
2022-12-06 00:57:13,682:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:13,682:INFO:Initializing create_model()
2022-12-06 00:57:13,682:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:13,683:INFO:Checking exceptions
2022-12-06 00:57:13,685:INFO:Importing libraries
2022-12-06 00:57:13,685:INFO:Copying training dataset
2022-12-06 00:57:13,690:INFO:Defining folds
2022-12-06 00:57:13,691:INFO:Declaring metric variables
2022-12-06 00:57:13,695:INFO:Importing untrained model
2022-12-06 00:57:13,699:INFO:Orthogonal Matching Pursuit Imported successfully
2022-12-06 00:57:13,711:INFO:Starting cross validation
2022-12-06 00:57:13,713:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:13,798:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,802:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,818:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,822:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,824:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,833:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,841:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,846:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,850:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,862:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2022-12-06 00:57:13,886:INFO:Calculating mean and std
2022-12-06 00:57:13,888:INFO:Creating metrics dataframe
2022-12-06 00:57:13,891:INFO:Uploading results into container
2022-12-06 00:57:13,892:INFO:Uploading model into container now
2022-12-06 00:57:13,892:INFO:master_model_container: 7
2022-12-06 00:57:13,893:INFO:display_container: 2
2022-12-06 00:57:13,893:INFO:OrthogonalMatchingPursuit()
2022-12-06 00:57:13,893:INFO:create_model() successfully completed......................................
2022-12-06 00:57:14,029:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:14,029:INFO:Creating metrics dataframe
2022-12-06 00:57:14,050:INFO:Initializing Bayesian Ridge
2022-12-06 00:57:14,051:INFO:Total runtime is 0.1760096351305644 minutes
2022-12-06 00:57:14,055:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:14,056:INFO:Initializing create_model()
2022-12-06 00:57:14,056:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:14,056:INFO:Checking exceptions
2022-12-06 00:57:14,059:INFO:Importing libraries
2022-12-06 00:57:14,059:INFO:Copying training dataset
2022-12-06 00:57:14,064:INFO:Defining folds
2022-12-06 00:57:14,064:INFO:Declaring metric variables
2022-12-06 00:57:14,071:INFO:Importing untrained model
2022-12-06 00:57:14,077:INFO:Bayesian Ridge Imported successfully
2022-12-06 00:57:14,083:INFO:Starting cross validation
2022-12-06 00:57:14,085:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:14,243:INFO:Calculating mean and std
2022-12-06 00:57:14,244:INFO:Creating metrics dataframe
2022-12-06 00:57:14,248:INFO:Uploading results into container
2022-12-06 00:57:14,249:INFO:Uploading model into container now
2022-12-06 00:57:14,249:INFO:master_model_container: 8
2022-12-06 00:57:14,249:INFO:display_container: 2
2022-12-06 00:57:14,250:INFO:BayesianRidge()
2022-12-06 00:57:14,250:INFO:create_model() successfully completed......................................
2022-12-06 00:57:14,402:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:14,403:INFO:Creating metrics dataframe
2022-12-06 00:57:14,425:INFO:Initializing Passive Aggressive Regressor
2022-12-06 00:57:14,425:INFO:Total runtime is 0.18224276304244996 minutes
2022-12-06 00:57:14,429:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:14,429:INFO:Initializing create_model()
2022-12-06 00:57:14,429:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:14,429:INFO:Checking exceptions
2022-12-06 00:57:14,431:INFO:Importing libraries
2022-12-06 00:57:14,431:INFO:Copying training dataset
2022-12-06 00:57:14,436:INFO:Defining folds
2022-12-06 00:57:14,437:INFO:Declaring metric variables
2022-12-06 00:57:14,441:INFO:Importing untrained model
2022-12-06 00:57:14,445:INFO:Passive Aggressive Regressor Imported successfully
2022-12-06 00:57:14,459:INFO:Starting cross validation
2022-12-06 00:57:14,461:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:14,641:INFO:Calculating mean and std
2022-12-06 00:57:14,642:INFO:Creating metrics dataframe
2022-12-06 00:57:14,646:INFO:Uploading results into container
2022-12-06 00:57:14,647:INFO:Uploading model into container now
2022-12-06 00:57:14,647:INFO:master_model_container: 9
2022-12-06 00:57:14,647:INFO:display_container: 2
2022-12-06 00:57:14,648:INFO:PassiveAggressiveRegressor(random_state=6923)
2022-12-06 00:57:14,648:INFO:create_model() successfully completed......................................
2022-12-06 00:57:14,795:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:14,795:INFO:Creating metrics dataframe
2022-12-06 00:57:14,815:INFO:Initializing Huber Regressor
2022-12-06 00:57:14,815:INFO:Total runtime is 0.1887439012527466 minutes
2022-12-06 00:57:14,823:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:14,823:INFO:Initializing create_model()
2022-12-06 00:57:14,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:14,824:INFO:Checking exceptions
2022-12-06 00:57:14,827:INFO:Importing libraries
2022-12-06 00:57:14,827:INFO:Copying training dataset
2022-12-06 00:57:14,836:INFO:Defining folds
2022-12-06 00:57:14,837:INFO:Declaring metric variables
2022-12-06 00:57:14,841:INFO:Importing untrained model
2022-12-06 00:57:14,846:INFO:Huber Regressor Imported successfully
2022-12-06 00:57:14,865:INFO:Starting cross validation
2022-12-06 00:57:14,867:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:14,998:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,010:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,022:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,030:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,038:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,047:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,051:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,058:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,068:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,083:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\linear_model\_huber.py:335: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2022-12-06 00:57:15,107:INFO:Calculating mean and std
2022-12-06 00:57:15,109:INFO:Creating metrics dataframe
2022-12-06 00:57:15,112:INFO:Uploading results into container
2022-12-06 00:57:15,113:INFO:Uploading model into container now
2022-12-06 00:57:15,114:INFO:master_model_container: 10
2022-12-06 00:57:15,114:INFO:display_container: 2
2022-12-06 00:57:15,114:INFO:HuberRegressor()
2022-12-06 00:57:15,114:INFO:create_model() successfully completed......................................
2022-12-06 00:57:15,251:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:15,251:INFO:Creating metrics dataframe
2022-12-06 00:57:15,268:INFO:Initializing K Neighbors Regressor
2022-12-06 00:57:15,268:INFO:Total runtime is 0.19629314343134563 minutes
2022-12-06 00:57:15,273:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:15,273:INFO:Initializing create_model()
2022-12-06 00:57:15,273:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:15,274:INFO:Checking exceptions
2022-12-06 00:57:15,276:INFO:Importing libraries
2022-12-06 00:57:15,276:INFO:Copying training dataset
2022-12-06 00:57:15,281:INFO:Defining folds
2022-12-06 00:57:15,281:INFO:Declaring metric variables
2022-12-06 00:57:15,287:INFO:Importing untrained model
2022-12-06 00:57:15,292:INFO:K Neighbors Regressor Imported successfully
2022-12-06 00:57:15,300:INFO:Starting cross validation
2022-12-06 00:57:15,302:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:15,506:INFO:Calculating mean and std
2022-12-06 00:57:15,507:INFO:Creating metrics dataframe
2022-12-06 00:57:15,511:INFO:Uploading results into container
2022-12-06 00:57:15,511:INFO:Uploading model into container now
2022-12-06 00:57:15,512:INFO:master_model_container: 11
2022-12-06 00:57:15,512:INFO:display_container: 2
2022-12-06 00:57:15,512:INFO:KNeighborsRegressor(n_jobs=-1)
2022-12-06 00:57:15,512:INFO:create_model() successfully completed......................................
2022-12-06 00:57:15,652:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:15,652:INFO:Creating metrics dataframe
2022-12-06 00:57:15,666:INFO:Initializing Decision Tree Regressor
2022-12-06 00:57:15,667:INFO:Total runtime is 0.20294345219930013 minutes
2022-12-06 00:57:15,672:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:15,672:INFO:Initializing create_model()
2022-12-06 00:57:15,672:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:15,672:INFO:Checking exceptions
2022-12-06 00:57:15,674:INFO:Importing libraries
2022-12-06 00:57:15,674:INFO:Copying training dataset
2022-12-06 00:57:15,678:INFO:Defining folds
2022-12-06 00:57:15,678:INFO:Declaring metric variables
2022-12-06 00:57:15,682:INFO:Importing untrained model
2022-12-06 00:57:15,686:INFO:Decision Tree Regressor Imported successfully
2022-12-06 00:57:15,693:INFO:Starting cross validation
2022-12-06 00:57:15,694:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:15,852:INFO:Calculating mean and std
2022-12-06 00:57:15,854:INFO:Creating metrics dataframe
2022-12-06 00:57:15,858:INFO:Uploading results into container
2022-12-06 00:57:15,858:INFO:Uploading model into container now
2022-12-06 00:57:15,859:INFO:master_model_container: 12
2022-12-06 00:57:15,859:INFO:display_container: 2
2022-12-06 00:57:15,860:INFO:DecisionTreeRegressor(random_state=6923)
2022-12-06 00:57:15,860:INFO:create_model() successfully completed......................................
2022-12-06 00:57:16,002:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:16,002:INFO:Creating metrics dataframe
2022-12-06 00:57:16,028:INFO:Initializing Random Forest Regressor
2022-12-06 00:57:16,028:INFO:Total runtime is 0.20896056095759075 minutes
2022-12-06 00:57:16,032:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:16,032:INFO:Initializing create_model()
2022-12-06 00:57:16,032:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:16,033:INFO:Checking exceptions
2022-12-06 00:57:16,035:INFO:Importing libraries
2022-12-06 00:57:16,035:INFO:Copying training dataset
2022-12-06 00:57:16,040:INFO:Defining folds
2022-12-06 00:57:16,041:INFO:Declaring metric variables
2022-12-06 00:57:16,046:INFO:Importing untrained model
2022-12-06 00:57:16,051:INFO:Random Forest Regressor Imported successfully
2022-12-06 00:57:16,062:INFO:Starting cross validation
2022-12-06 00:57:16,064:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:16,737:INFO:Calculating mean and std
2022-12-06 00:57:16,739:INFO:Creating metrics dataframe
2022-12-06 00:57:16,742:INFO:Uploading results into container
2022-12-06 00:57:16,743:INFO:Uploading model into container now
2022-12-06 00:57:16,744:INFO:master_model_container: 13
2022-12-06 00:57:16,744:INFO:display_container: 2
2022-12-06 00:57:16,744:INFO:RandomForestRegressor(n_jobs=-1, random_state=6923)
2022-12-06 00:57:16,744:INFO:create_model() successfully completed......................................
2022-12-06 00:57:16,892:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:16,893:INFO:Creating metrics dataframe
2022-12-06 00:57:16,906:INFO:Initializing Extra Trees Regressor
2022-12-06 00:57:16,906:INFO:Total runtime is 0.22359416882197064 minutes
2022-12-06 00:57:16,909:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:16,910:INFO:Initializing create_model()
2022-12-06 00:57:16,910:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:16,910:INFO:Checking exceptions
2022-12-06 00:57:16,912:INFO:Importing libraries
2022-12-06 00:57:16,912:INFO:Copying training dataset
2022-12-06 00:57:16,915:INFO:Defining folds
2022-12-06 00:57:16,915:INFO:Declaring metric variables
2022-12-06 00:57:16,920:INFO:Importing untrained model
2022-12-06 00:57:16,925:INFO:Extra Trees Regressor Imported successfully
2022-12-06 00:57:16,932:INFO:Starting cross validation
2022-12-06 00:57:16,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:17,540:INFO:Calculating mean and std
2022-12-06 00:57:17,541:INFO:Creating metrics dataframe
2022-12-06 00:57:17,545:INFO:Uploading results into container
2022-12-06 00:57:17,545:INFO:Uploading model into container now
2022-12-06 00:57:17,546:INFO:master_model_container: 14
2022-12-06 00:57:17,546:INFO:display_container: 2
2022-12-06 00:57:17,547:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=6923)
2022-12-06 00:57:17,547:INFO:create_model() successfully completed......................................
2022-12-06 00:57:17,694:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:17,694:INFO:Creating metrics dataframe
2022-12-06 00:57:17,713:INFO:Initializing AdaBoost Regressor
2022-12-06 00:57:17,714:INFO:Total runtime is 0.23706000645955405 minutes
2022-12-06 00:57:17,719:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:17,720:INFO:Initializing create_model()
2022-12-06 00:57:17,720:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:17,720:INFO:Checking exceptions
2022-12-06 00:57:17,724:INFO:Importing libraries
2022-12-06 00:57:17,724:INFO:Copying training dataset
2022-12-06 00:57:17,731:INFO:Defining folds
2022-12-06 00:57:17,732:INFO:Declaring metric variables
2022-12-06 00:57:17,738:INFO:Importing untrained model
2022-12-06 00:57:17,746:INFO:AdaBoost Regressor Imported successfully
2022-12-06 00:57:17,763:INFO:Starting cross validation
2022-12-06 00:57:17,765:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:17,952:INFO:Calculating mean and std
2022-12-06 00:57:17,953:INFO:Creating metrics dataframe
2022-12-06 00:57:17,957:INFO:Uploading results into container
2022-12-06 00:57:17,957:INFO:Uploading model into container now
2022-12-06 00:57:17,958:INFO:master_model_container: 15
2022-12-06 00:57:17,958:INFO:display_container: 2
2022-12-06 00:57:17,958:INFO:AdaBoostRegressor(random_state=6923)
2022-12-06 00:57:17,958:INFO:create_model() successfully completed......................................
2022-12-06 00:57:18,101:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:18,102:INFO:Creating metrics dataframe
2022-12-06 00:57:18,128:INFO:Initializing Gradient Boosting Regressor
2022-12-06 00:57:18,128:INFO:Total runtime is 0.24396031300226848 minutes
2022-12-06 00:57:18,133:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:18,133:INFO:Initializing create_model()
2022-12-06 00:57:18,133:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:18,134:INFO:Checking exceptions
2022-12-06 00:57:18,136:INFO:Importing libraries
2022-12-06 00:57:18,136:INFO:Copying training dataset
2022-12-06 00:57:18,140:INFO:Defining folds
2022-12-06 00:57:18,141:INFO:Declaring metric variables
2022-12-06 00:57:18,145:INFO:Importing untrained model
2022-12-06 00:57:18,150:INFO:Gradient Boosting Regressor Imported successfully
2022-12-06 00:57:18,162:INFO:Starting cross validation
2022-12-06 00:57:18,164:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:18,436:INFO:Calculating mean and std
2022-12-06 00:57:18,438:INFO:Creating metrics dataframe
2022-12-06 00:57:18,441:INFO:Uploading results into container
2022-12-06 00:57:18,442:INFO:Uploading model into container now
2022-12-06 00:57:18,443:INFO:master_model_container: 16
2022-12-06 00:57:18,443:INFO:display_container: 2
2022-12-06 00:57:18,443:INFO:GradientBoostingRegressor(random_state=6923)
2022-12-06 00:57:18,443:INFO:create_model() successfully completed......................................
2022-12-06 00:57:18,582:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:18,582:INFO:Creating metrics dataframe
2022-12-06 00:57:18,596:INFO:Initializing Light Gradient Boosting Machine
2022-12-06 00:57:18,597:INFO:Total runtime is 0.2517767945925395 minutes
2022-12-06 00:57:18,600:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:18,601:INFO:Initializing create_model()
2022-12-06 00:57:18,601:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:18,601:INFO:Checking exceptions
2022-12-06 00:57:18,603:INFO:Importing libraries
2022-12-06 00:57:18,603:INFO:Copying training dataset
2022-12-06 00:57:18,608:INFO:Defining folds
2022-12-06 00:57:18,608:INFO:Declaring metric variables
2022-12-06 00:57:18,612:INFO:Importing untrained model
2022-12-06 00:57:18,617:INFO:Light Gradient Boosting Machine Imported successfully
2022-12-06 00:57:18,630:INFO:Starting cross validation
2022-12-06 00:57:18,631:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:18,919:INFO:Calculating mean and std
2022-12-06 00:57:18,921:INFO:Creating metrics dataframe
2022-12-06 00:57:18,924:INFO:Uploading results into container
2022-12-06 00:57:18,925:INFO:Uploading model into container now
2022-12-06 00:57:18,926:INFO:master_model_container: 17
2022-12-06 00:57:18,926:INFO:display_container: 2
2022-12-06 00:57:18,927:INFO:LGBMRegressor(random_state=6923)
2022-12-06 00:57:18,927:INFO:create_model() successfully completed......................................
2022-12-06 00:57:19,066:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:19,066:INFO:Creating metrics dataframe
2022-12-06 00:57:19,079:INFO:Initializing Dummy Regressor
2022-12-06 00:57:19,080:INFO:Total runtime is 0.259827470779419 minutes
2022-12-06 00:57:19,085:INFO:SubProcess create_model() called ==================================
2022-12-06 00:57:19,086:INFO:Initializing create_model()
2022-12-06 00:57:19,086:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022CE07DAB90>, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:19,086:INFO:Checking exceptions
2022-12-06 00:57:19,089:INFO:Importing libraries
2022-12-06 00:57:19,090:INFO:Copying training dataset
2022-12-06 00:57:19,095:INFO:Defining folds
2022-12-06 00:57:19,096:INFO:Declaring metric variables
2022-12-06 00:57:19,101:INFO:Importing untrained model
2022-12-06 00:57:19,108:INFO:Dummy Regressor Imported successfully
2022-12-06 00:57:19,117:INFO:Starting cross validation
2022-12-06 00:57:19,118:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2022-12-06 00:57:19,290:INFO:Calculating mean and std
2022-12-06 00:57:19,292:INFO:Creating metrics dataframe
2022-12-06 00:57:19,295:INFO:Uploading results into container
2022-12-06 00:57:19,296:INFO:Uploading model into container now
2022-12-06 00:57:19,296:INFO:master_model_container: 18
2022-12-06 00:57:19,297:INFO:display_container: 2
2022-12-06 00:57:19,297:INFO:DummyRegressor()
2022-12-06 00:57:19,297:INFO:create_model() successfully completed......................................
2022-12-06 00:57:19,432:INFO:SubProcess create_model() end ==================================
2022-12-06 00:57:19,432:INFO:Creating metrics dataframe
2022-12-06 00:57:19,459:INFO:Initializing create_model()
2022-12-06 00:57:19,459:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=GradientBoostingRegressor(random_state=6923), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2022-12-06 00:57:19,459:INFO:Checking exceptions
2022-12-06 00:57:19,465:INFO:Importing libraries
2022-12-06 00:57:19,466:INFO:Copying training dataset
2022-12-06 00:57:19,470:INFO:Defining folds
2022-12-06 00:57:19,470:INFO:Declaring metric variables
2022-12-06 00:57:19,470:INFO:Importing untrained model
2022-12-06 00:57:19,470:INFO:Declaring custom model
2022-12-06 00:57:19,471:INFO:Gradient Boosting Regressor Imported successfully
2022-12-06 00:57:19,472:INFO:Cross validation set to False
2022-12-06 00:57:19,472:INFO:Fitting Model
2022-12-06 00:57:19,661:INFO:GradientBoostingRegressor(random_state=6923)
2022-12-06 00:57:19,661:INFO:create_model() successfully completed......................................
2022-12-06 00:57:19,844:INFO:master_model_container: 18
2022-12-06 00:57:19,844:INFO:display_container: 2
2022-12-06 00:57:19,844:INFO:GradientBoostingRegressor(random_state=6923)
2022-12-06 00:57:19,845:INFO:compare_models() successfully completed......................................
2022-12-06 00:57:34,917:INFO:Initializing evaluate_model()
2022-12-06 00:57:34,917:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, estimator=GradientBoostingRegressor(random_state=6923), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None, use_train_data=False)
2022-12-06 00:57:34,950:INFO:Initializing plot_model()
2022-12-06 00:57:34,951:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), use_train_data=False, verbose=False, display=None, display_format=None, estimator=GradientBoostingRegressor(random_state=6923), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, system=True)
2022-12-06 00:57:34,951:INFO:Checking exceptions
2022-12-06 00:57:34,955:INFO:Preloading libraries
2022-12-06 00:57:34,964:INFO:Copying training dataset
2022-12-06 00:57:34,964:INFO:Plot type: pipeline
2022-12-06 00:57:35,186:INFO:Visual Rendered Successfully
2022-12-06 00:57:35,331:INFO:plot_model() successfully completed......................................
2022-12-06 00:57:41,076:INFO:Initializing plot_model()
2022-12-06 00:57:41,076:INFO:plot_model(plot=residuals, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=GradientBoostingRegressor(random_state=6923), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, system=True)
2022-12-06 00:57:41,076:INFO:Checking exceptions
2022-12-06 00:57:41,086:INFO:Preloading libraries
2022-12-06 00:57:41,097:INFO:Copying training dataset
2022-12-06 00:57:41,097:INFO:Plot type: residuals
2022-12-06 00:57:41,296:INFO:Fitting Model
2022-12-06 00:57:41,297:WARNING:C:\Users\dumay\Downloads\esiee_2022_ia_tp_banque\Pycaret\venv\lib\site-packages\sklearn\base.py:450: UserWarning: X does not have valid feature names, but GradientBoostingRegressor was fitted with feature names
  warnings.warn(

2022-12-06 00:57:41,347:INFO:Scoring test/hold-out set
2022-12-06 00:57:42,100:INFO:Visual Rendered Successfully
2022-12-06 00:57:42,264:INFO:plot_model() successfully completed......................................
2022-12-06 00:57:43,735:INFO:Initializing plot_model()
2022-12-06 00:57:43,735:INFO:plot_model(plot=feature, fold=None, use_train_data=False, verbose=True, display=None, display_format=None, estimator=GradientBoostingRegressor(random_state=6923), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022CE1BAFD90>, system=True)
2022-12-06 00:57:43,735:INFO:Checking exceptions
2022-12-06 00:57:43,745:INFO:Preloading libraries
2022-12-06 00:57:43,761:INFO:Copying training dataset
2022-12-06 00:57:43,761:INFO:Plot type: feature
2022-12-06 00:57:43,762:WARNING:No coef_ found. Trying feature_importances_
2022-12-06 00:57:43,969:INFO:Visual Rendered Successfully
2022-12-06 00:57:44,119:INFO:plot_model() successfully completed......................................
2022-12-06 00:57:46,035:INFO:Initializing save_model()
2022-12-06 00:57:46,036:INFO:save_model(model=GradientBoostingRegressor(random_state=6923), model_name=my_best_pipeline, prep_pipe_=Pipeline(memory=Memory(location=C:\Users\dumay\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(fill_value='constant',
                                                              strategy='constant'))),
                ('ordinal_encoding'...
                                                               mapping=[{'col': 'sex',
                                                                         'mapping': {nan: -1,
                                                                                     'female': 0,
                                                                                     'male': 1}},
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('low_variance',
                 TransformerWrapper(exclude=[],
                                    transformer=VarianceThreshold(threshold=0)))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2022-12-06 00:57:46,036:INFO:Adding model into prep_pipe
2022-12-06 00:57:46,059:INFO:my_best_pipeline.pkl saved in current working directory
2022-12-06 00:57:46,081:INFO:Pipeline(memory=Memory(location=C:\Users\dumay\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(fill_value='constant',
                                                              strategy='constant'))),
                ('ordinal_encoding'...
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('low_variance',
                 TransformerWrapper(exclude=[],
                                    transformer=VarianceThreshold(threshold=0))),
                ('trained_model',
                 GradientBoostingRegressor(random_state=6923))])
2022-12-06 00:57:46,081:INFO:save_model() successfully completed......................................
2022-12-06 00:57:54,097:INFO:Soft dependency imported: fastapi: 0.88.0
2022-12-06 00:57:54,097:INFO:Soft dependency imported: uvicorn: 0.20.0
2022-12-06 00:57:54,097:INFO:Soft dependency imported: pydantic: 1.10.2
2022-12-06 00:57:54,128:INFO:Initializing save_model()
2022-12-06 00:57:54,128:INFO:save_model(model=<function load_model at 0x0000022CDEB505E0>, model_name=my_api, prep_pipe_=Pipeline(memory=Memory(location=C:\Users\dumay\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(fill_value='constant',
                                                              strategy='constant'))),
                ('ordinal_encoding'...
                                                               mapping=[{'col': 'sex',
                                                                         'mapping': {nan: -1,
                                                                                     'female': 0,
                                                                                     'male': 1}},
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('low_variance',
                 TransformerWrapper(exclude=[],
                                    transformer=VarianceThreshold(threshold=0)))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2022-12-06 00:57:54,128:INFO:Adding model into prep_pipe
2022-12-06 00:57:54,136:INFO:my_api.pkl saved in current working directory
2022-12-06 00:57:54,158:INFO:Pipeline(memory=Memory(location=C:\Users\dumay\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(fill_value='constant',
                                                              strategy='constant'))),
                ('ordinal_encoding'...
                                                                        {'col': 'smoker',
                                                                         'mapping': {nan: -1,
                                                                                     'no': 0,
                                                                                     'yes': 1}}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('low_variance',
                 TransformerWrapper(exclude=[],
                                    transformer=VarianceThreshold(threshold=0))),
                ('trained_model', <function load_model at 0x0000022CDEB505E0>)])
2022-12-06 00:57:54,158:INFO:save_model() successfully completed......................................
